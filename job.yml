apiVersion: v1
kind: ConfigMap
metadata:
  name: preflight-job-script
  namespace: kube-system
data:
  entrypoint.sh: |-
    #!/bin/sh

    FAIL='\033[0;31mFAIL: '
    PASS='\033[0;32mPASS: '
    RESET='\033[0m'

    apk add coreutils >/dev/null

    echo -e "\033[0;33mSUMMARY"
    echo -------

    MIN_K8S=$(echo $MIN_K8S | sed 's/^\([0-9]*\.[0-9]*\)\..*/\1/; s/\<[0-9]\>/0&/g')
    grep ^K8S_VER: preflight | while IFS=: read x n; do
      m=$(echo $n | sed 's/^\([0-9]*\.[0-9]*\)\..*/\1/; s/\<[0-9]\>/0&/g')
      if [ $m \< $MIN_K8S ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo Cluster is running Kubernetes $n
    done

    grep ^CPU: preflight | while IFS=: read x host n; do
      if [ $MIN_CORES -gt $n ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo $host has $n CPUs
    done
    
    MIN_DOCKER=$(echo $MIN_DOCKER | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\)[^0-9].*/\1/; s/\<[0-9]\>/0&/g')
    grep ^DOCKER: preflight | while IFS=: read x host n; do
      m=$(echo $n | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\)[^0-9].*/\1/; s/\<[0-9]\>/0&/g')
      if [ $m \< $MIN_DOCKER ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo $host is running Docker $n
    done

    MIN_KERNEL=$(echo $MIN_KERNEL | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\)[^0-9].*/\1/; s/\<[0-9]\>/0&/g')
    grep ^KERNEL: preflight | while IFS=: read x host n; do
      m=$(echo $n | sed 's/^\([0-9]*\.[0-9]*\.[0-9]*\)[^0-9].*/\1/; s/\<[0-9]\>/0&/g')
      if [ $m \< $MIN_KERNEL ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo $host is running kernel $n
    done

    grep ^RAM: preflight | while IFS=: read x host n; do
      if [ $MIN_RAM -gt $n ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo $host has $n MB RAM
    done

    grep ^SWAP: preflight | while IFS=: read x host n; do
      if [ $n -gt 0 ]; then
        echo -e "$FAIL$host has swap"
      else
        echo -e "$PASS$host has no swap"
      fi
    done

    grep ^VAR: preflight | while IFS=: read x host n; do
      if [ $MIN_VAR -gt $n ]; then
        echo -ne "$FAIL"
      else
        echo -ne "$PASS"
      fi
      echo $host has $n MB free on /var
    done

    grep ^PING: preflight | while IFS=: read x src dest n; do
      if [ $n == fail ]; then
        echo -e "${FAIL}Ping failure from $src to $dest"
      else
        if [ $MAX_PING -lt $n ]; then
          echo -ne "$FAIL"
        else
          echo -ne "$PASS"
        fi
        echo Latency from $src to $dest is $n Î¼s
      fi
    done

    grep ^BLK: preflight | while IFS=: read x host name size type; do
      echo -e "${RESET}$host has device $name ($size GB) ($type)"
    done

    for a in $NODES; do
      for c in $NODES; do
        [ $a = $c ] && continue
        echo "$a:$(echo $START_PORT+1 | bc):$c:UDP"
      done
      for b in $(seq $START_PORT $END_PORT); do
        for c in $NODES; do
          [ $a = $c ] && continue
          echo "$a:$b:$c:TCP"
        done
      done
    done | sed s/^/NC:/ | sort >desired
    comm -23 --nocheck-order desired preflight | while IFS=: read x dest port src; do
      echo -e "${FAIL}Cannot connect from $src to $dest:$port"
    done

    echo -ne $RESET
---
apiVersion: batch/v1
kind: Job
metadata:
  name: preflight-job
  namespace: kube-system
spec:
  template:
    spec:
      terminationGracePeriodSeconds: 0
      hostNetwork: true
      volumes:
      - name: preflight-job-script
        configMap:
          defaultMode: 0700
          name: preflight-job-script
      - name: preflight-output
        configMap:
          name: preflight-output
      restartPolicy: Never
      containers:
      - name: preflight-job
        image: alpine:latest
        command:
        - /entrypoint.sh
        volumeMounts:
        - name: preflight-job-script
          mountPath: /entrypoint.sh
          readOnly: true
          subPath: entrypoint.sh
        - name: preflight-output
          mountPath: /preflight
          readOnly: true
          subPath: preflight
        env:
          - name: START_PORT
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: start_port
          - name: END_PORT
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: end_port
          - name: NODES
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: nodes
          - name: MIN_K8S
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_k8s
          - name: MIN_CORES
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_cores
          - name: MIN_DOCKER
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_docker
          - name: MIN_KERNEL
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_kernel
          - name: MIN_RAM
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_ram
          - name: MIN_VAR
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: min_var
          - name: MAX_PING
            valueFrom:
              configMapKeyRef:
                name: preflight-config
                key: max_ping
